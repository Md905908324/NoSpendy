{"ast":null,"code":"var _jsxFileName = \"/Users/eddy/My Drive/NYU/Others/Hackathon/NoSpendy/NoSpendyFrontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n\n  // Check if user is logged in on page load\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          try {\n            const userData = JSON.parse(storedUser);\n\n            // Set the user in context without verification first\n            setCurrentUser(userData);\n\n            // Then verify the token in the background\n            try {\n              const response = await axios.get('/users/verify-token', {\n                headers: {\n                  Authorization: `Bearer ${userData.token}`\n                }\n              });\n              if (!response.data.valid) {\n                console.log('Token invalid, clearing auth data');\n                setCurrentUser(null);\n                localStorage.removeItem('user');\n              }\n            } catch (verifyError) {\n              console.error('Token verification failed:', verifyError);\n              // Don't clear user data on verification failure - this might be causing your issue\n            }\n          } catch (parseError) {\n            console.error('Error parsing stored user data:', parseError);\n            localStorage.removeItem('user');\n          }\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // Register function\n  const register = async userData => {\n    try {\n      const response = await axios.post('/users/register', userData);\n      const user = response.data;\n\n      // Store user in state and localStorage\n      setCurrentUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      setAuthError(null);\n      return user;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Registration error:', error);\n      setAuthError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Registration failed');\n      throw error;\n    }\n  };\n\n  // Login function\n  const login = async (username, password) => {\n    console.log(\"AuthContext.login called with username:\", username);\n    try {\n      console.log(\"Making API request to /users/login...\");\n      const response = await axios.post('/users/login', {\n        username,\n        password\n      });\n      console.log(\"Login API response:\", response.data);\n      const user = response.data;\n\n      // Store user in state and localStorage\n      console.log(\"Setting current user in context...\");\n      setCurrentUser(user);\n      console.log(\"Storing user in localStorage...\");\n      localStorage.setItem('user', JSON.stringify(user));\n      setAuthError(null);\n      console.log(\"Login successful\");\n      return user;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Login error in AuthContext:', error);\n      if (error.response) {\n        console.error(\"Error response status:\", error.response.status);\n        console.error(\"Error response data:\", error.response.data);\n      }\n      setAuthError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Invalid username or password');\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('user');\n    setAuthError(null);\n  };\n\n  // Add this function to the AuthContext\n  const signOut = () => {\n    console.log(\"AuthContext.signOut called\");\n    console.log(\"Clearing current user from context...\");\n    setCurrentUser(null);\n    console.log(\"Removing user from localStorage...\");\n    localStorage.removeItem('user');\n    console.log(\"Sign out complete\");\n  };\n  const value = {\n    currentUser,\n    login,\n    logout,\n    register,\n    loading,\n    authError,\n    setAuthError,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"UnecE+aLfCz4x7NYmNeklthKfGc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","authError","setAuthError","checkAuth","storedUser","localStorage","getItem","userData","JSON","parse","response","get","headers","Authorization","token","data","valid","console","log","removeItem","verifyError","error","parseError","register","post","user","setItem","stringify","_error$response","_error$response$data","login","username","password","_error$response2","_error$response2$data","status","logout","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/eddy/My Drive/NYU/Others/Hackathon/NoSpendy/NoSpendyFrontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n\n  // Check if user is logged in on page load\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const storedUser = localStorage.getItem('user');\n        \n        if (storedUser) {\n          try {\n            const userData = JSON.parse(storedUser);\n            \n            // Set the user in context without verification first\n            setCurrentUser(userData);\n            \n            // Then verify the token in the background\n            try {\n              const response = await axios.get('/users/verify-token', {\n                headers: { Authorization: `Bearer ${userData.token}` }\n              });\n              \n              if (!response.data.valid) {\n                console.log('Token invalid, clearing auth data');\n                setCurrentUser(null);\n                localStorage.removeItem('user');\n              }\n            } catch (verifyError) {\n              console.error('Token verification failed:', verifyError);\n              // Don't clear user data on verification failure - this might be causing your issue\n            }\n          } catch (parseError) {\n            console.error('Error parsing stored user data:', parseError);\n            localStorage.removeItem('user');\n          }\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkAuth();\n  }, []);\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      const response = await axios.post('/users/register', userData);\n      const user = response.data;\n      \n      // Store user in state and localStorage\n      setCurrentUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      setAuthError(null);\n      return user;\n    } catch (error) {\n      console.error('Registration error:', error);\n      setAuthError(error.response?.data?.error || 'Registration failed');\n      throw error;\n    }\n  };\n\n  // Login function\n  const login = async (username, password) => {\n    console.log(\"AuthContext.login called with username:\", username);\n    \n    try {\n      console.log(\"Making API request to /users/login...\");\n      const response = await axios.post('/users/login', { username, password });\n      console.log(\"Login API response:\", response.data);\n      \n      const user = response.data;\n      \n      // Store user in state and localStorage\n      console.log(\"Setting current user in context...\");\n      setCurrentUser(user);\n      \n      console.log(\"Storing user in localStorage...\");\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      setAuthError(null);\n      console.log(\"Login successful\");\n      return user;\n    } catch (error) {\n      console.error('Login error in AuthContext:', error);\n      \n      if (error.response) {\n        console.error(\"Error response status:\", error.response.status);\n        console.error(\"Error response data:\", error.response.data);\n      }\n      \n      setAuthError(error.response?.data?.error || 'Invalid username or password');\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('user');\n    setAuthError(null);\n  };\n\n  // Add this function to the AuthContext\n  const signOut = () => {\n    console.log(\"AuthContext.signOut called\");\n    console.log(\"Clearing current user from context...\");\n    setCurrentUser(null);\n    \n    console.log(\"Removing user from localStorage...\");\n    localStorage.removeItem('user');\n    \n    console.log(\"Sign out complete\");\n  };\n\n  const value = {\n    currentUser,\n    login,\n    logout,\n    register,\n    loading,\n    authError,\n    setAuthError,\n    signOut\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}